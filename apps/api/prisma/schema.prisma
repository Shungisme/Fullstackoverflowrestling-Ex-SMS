generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Translation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  entity    String
  entityId  String   @db.ObjectId
  field     String
  lang      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entity, entityId, field, lang], name: "unique_translation")
  @@map("translations")
}

model Student {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String   @unique
  name        String
  dateOfBirth DateTime
  gender      Gender
  course      Int
  email       String
  phone       String
  nationality String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  facultyId String  @db.ObjectId
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  permanentAddressId String?  @unique @db.ObjectId
  permanentAddress   Address? @relation("PermanentAddress", fields: [permanentAddressId], references: [id])

  temporaryAddressId String?  @unique @db.ObjectId
  temporaryAddress   Address? @relation("TemporaryAddress", fields: [temporaryAddressId], references: [id])

  mailingAddressId String  @unique @db.ObjectId
  mailingAddress   Address @relation("MailingAddress", fields: [mailingAddressId], references: [id])

  programId String  @db.ObjectId
  program   Program @relation(fields: [programId], references: [id])

  statusId String @db.ObjectId
  status   Status @relation(fields: [statusId], references: [id])

  identityPaperId    String               @unique @db.ObjectId
  identityPaper      IdentityPaper        @relation(fields: [identityPaperId], references: [id])
  StudentClassResult StudentClassResult[]
  StudentClassEnroll StudentClassEnroll[]

  // Map model to model of table
  @@map("students")
}

model Faculty {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Back relation
  students Student[]
  Subject  Subject[]

  // Map model to model of table
  @@map("faculties")
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  number    String
  street    String
  district  String
  city      String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Back relation
  permanentAddressOf Student? @relation("PermanentAddress")
  temporaryAddressOf Student? @relation("TemporaryAddress")
  mailingAddressOf   Student? @relation("MailingAddress")

  // Map model to model of table
  @@map("addresses")
}

model Program {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Back relation
  student Student[]

  // Map model to model of table
  @@map("programs")
}

model Status {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Back relation
  student Student[]

  // Map model to model of table
  @@map("statuses")
}

model IdentityPaper {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  type           String
  number         String
  issueDate      DateTime
  expirationDate DateTime
  placeOfIssue   String
  hasChip        Boolean?
  issuingCountry String?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Back relation
  student Student?

  // Map model to model of table
  @@map("identity_papers")
}

model Subject {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  code        String     @unique
  title       String
  credit      Int
  facultyId   String     @db.ObjectId
  description String
  status      StatusEnum
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  faculty         Faculty               @relation(fields: [facultyId], references: [id])
  prerequisiteFor SubjectPrerequisite[] @relation("SubjectPrerequisiteSubject")
  prerequisites   SubjectPrerequisite[] @relation("SubjectPrerequisitePrerequisite")
  classes         Class[]

  // Map model to model of table
  @@map("subjects")
}

model SubjectPrerequisite {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  subjectId             String @db.ObjectId
  prerequisiteSubjectId String @db.ObjectId

  // Relations
  subject             Subject @relation("SubjectPrerequisiteSubject", fields: [subjectId], references: [id])
  prerequisiteSubject Subject @relation("SubjectPrerequisitePrerequisite", fields: [prerequisiteSubjectId], references: [id])

  // Map model to model of table
  @@map("subjects_prerequisites")
}

model Class {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  code            String   @unique
  subjectCode     String
  semesterId      String   @db.ObjectId
  teacherName     String
  maximumQuantity Int
  classSchedule   String
  classroom       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  subject  Subject              @relation(fields: [subjectCode], references: [code])
  semester Semester             @relation(fields: [semesterId], references: [id])
  enrolls  StudentClassEnroll[]
  results  StudentClassResult[]

  // Map model to model of table
  @@map("classes")
}

model Semester {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  academicYear String
  semester     Int
  startedAt    DateTime
  endedAt      DateTime

  // Back relation
  classes Class[]

  // Map model to model of table
  @@map("semesters")
}

model StudentClassResult {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  studentId String
  classCode String
  type      ResultEnum
  factor    Float
  score     Float
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [studentId])
  class   Class   @relation(fields: [classCode], references: [code])

  // Map model to model of table
  @@map("students_classes_results")
}

model StudentClassEnroll {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  studentId String
  classCode String
  type      EnrollEnum
  createdAt DateTime   @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [studentId])
  class   Class   @relation(fields: [classCode], references: [code])

  // Map model to model of table
  @@map("students_classes_enrolls")
}

enum ResultEnum {
  MIDTERM
  FINALTERM
  OTHER
}

enum EnrollEnum {
  COMPLETE
  DROP
  FAIL
}

enum StatusEnum {
  ACTIVATED
  DEACTIVATED
  DELETED
}

enum IdentityPaperType {
  CMND
  CCCD
  PASSPORT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
