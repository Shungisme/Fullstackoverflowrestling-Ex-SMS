generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Student {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String   @unique
  name        String
  dateOfBirth DateTime
  gender      Gender
  course      Int
  email       String
  phone       String
  nationality String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  facultyId String  @db.ObjectId
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  permanentAddressId String?  @unique @db.ObjectId
  permanentAddress   Address? @relation("PermanentAddress", fields: [permanentAddressId], references: [id])

  temporaryAddressId String?  @unique @db.ObjectId
  temporaryAddress   Address? @relation("TemporaryAddress", fields: [temporaryAddressId], references: [id])

  mailingAddressId String  @unique @db.ObjectId
  mailingAddress   Address @relation("MailingAddress", fields: [mailingAddressId], references: [id])

  programId String  @db.ObjectId
  program   Program @relation(fields: [programId], references: [id])

  statusId String @db.ObjectId
  status   Status @relation(fields: [statusId], references: [id])

  identityPaperId String        @unique @db.ObjectId
  identityPaper   IdentityPaper @relation(fields: [identityPaperId], references: [id])

  // Map model to model of table
  @@map("students")
}

model Faculty {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Back relation
  students Student[]

  // Map model to model of table
  @@map("faculties")
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  number    String
  street    String
  district  String
  city      String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Back relation
  permanentAddressOf Student? @relation("PermanentAddress")
  temporaryAddressOf Student? @relation("TemporaryAddress")
  mailingAddressOf   Student? @relation("MailingAddress")

  // Map model to model of table
  @@map("addresses")
}

model Program {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Back relation
  student Student[]

  // Map model to model of table
  @@map("programs")
}

model Status {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Back relation
  student Student[]

  // Map model to model of table
  @@map("statuses")
}

model IdentityPaper {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  type           String
  number         String
  issueDate      DateTime
  expirationDate DateTime
  placeOfIssue   String
  hasChip        Boolean?
  issuingCountry String?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Back relation
  student Student?

  // Map model to model of table
  @@map("identity_papers")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum IdentityPaperType {
  CMND
  CCCD
  PASSPORT
}
